{"version":3,"sources":["Visualizer.jsx","serviceWorker.js","index.js"],"names":["_","require","ARRAY_SIZE","Visualizer","props","handleArraySliderChange","value","generateArray","handleAnimationSliderChange","setState","animationSpeed","handleDropdownChange","event","algorithm","isSorted","isSorting","isComputing","timerIds","animationCount","state","array","this","forEach","clearTimeout","arr","i","push","Math","floor","random","color","debounce","addAnimation","clone","cloneDeep","setTimeout","min_id","j","splice","quickSort","low","high","pivot","pi","quickSortPartition","className","min","max","orientation","onChange","tooltip","step","format","ref","options","label","placeholder","onClick","selectionSort","quickSortHelper","bubbleSort","initEndSequence","href","id","map","el","key","style","backgroundColor","height","width","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.8d9c0912.chunk.js","sourcesContent":["import React from \"react\";\r\nimport \"./Visualizer.scss\";\r\nimport Slider from \"react-rangeslider\";\r\nimport \"react-rangeslider/lib/index.css\";\r\nimport Dropdown from \"react-dropdown\";\r\nimport \"react-dropdown/style.css\";\r\nvar _ = require(\"lodash\");\r\n\r\nvar ARRAY_SIZE = 100;\r\nconst MAX_ARRAY_VAL = 1000;\r\n\r\n//percent of screen that array container div uses\r\nconst HEIGHT_PROP = 70;\r\nconst WIDTH_PROP = 60;\r\n\r\n//bar colors\r\nconst START_COLOR = \"red\";\r\nconst COMP_COLOR = \"yellow\";\r\nconst FINISH_COLOR = \"blue\";\r\nconst PIVOT_COLOR = \"green\";\r\n\r\nclass Visualizer extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.isSorted = false;\r\n        this.isSorting = false;\r\n        this.isComputing = false;\r\n        // Timer Ids used to cancel sorting animation\r\n        this.timerIds = [];\r\n        this.animationCount = 0;\r\n\r\n        this.state = {\r\n            array: [],\r\n            animationSpeed: 0.1,\r\n            algorithm: \"\"\r\n        };\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.generateArray();\r\n    }\r\n\r\n    generateArray() {\r\n        // Stop any animations currently running\r\n        this.timerIds.forEach(function(value) {\r\n            clearTimeout(value);\r\n        });\r\n        this.timerIds = [];\r\n        this.animationCount = 0;\r\n\r\n        // Populate the array\r\n        let arr = [];\r\n        for (var i = 0; i < ARRAY_SIZE; i++) {\r\n            arr.push({\r\n                value: Math.floor(Math.random() * MAX_ARRAY_VAL),\r\n                color: START_COLOR\r\n            });\r\n        }\r\n        this.isSorted = false;\r\n        // Keeps track of whether sorting animations are still running\r\n        this.isSorting = false;\r\n        // Keeps track of whether the actual sorting algorithm code is still executing\r\n        this.isComputing = false;\r\n        this.setState({\r\n            array: arr\r\n        });\r\n    }\r\n\r\n    addAnimation(array) {\r\n        // If code is still executing, wait half a second before trying to queue animations\r\n        if (this.isComputing) {\r\n            _.debounce(() => {\r\n                this.addAnimation(array);\r\n            }, 500);\r\n        }\r\n        // We need to set the state array as a clone to avoid issues with modifying the passed in array later.\r\n        let clone = _.cloneDeep(array);\r\n        this.timerIds.push(\r\n            setTimeout(() => {\r\n                this.setState({ array: clone });\r\n            }, this.animationCount++ / this.state.animationSpeed)\r\n        );\r\n    }\r\n\r\n    handleArraySliderChange = value => {\r\n        if (value !== ARRAY_SIZE) {\r\n            ARRAY_SIZE = value;\r\n            this.generateArray();\r\n        }\r\n    };\r\n\r\n    handleAnimationSliderChange = value => {\r\n        this.setState({ animationSpeed: value });\r\n    };\r\n\r\n    handleDropdownChange = event => {\r\n        this.setState({ algorithm: event.value });\r\n    };\r\n\r\n    // Called after any sorting algorithm completes and animations are pending\r\n    initEndSequence() {\r\n        this.isComputing = false;\r\n        this.timerIds.push(setTimeout(() => {\r\n            this.isSorting = false;\r\n            this.isSorted = true;\r\n        }, this.animationCount));\r\n    }\r\n\r\n    /* SORTING ALGORITHMS */\r\n\r\n    selectionSort() {\r\n        let array = this.state.array;\r\n\r\n        for (let i = 0; i < ARRAY_SIZE; i++) {\r\n            // Find minimum element in unsorted array\r\n            var min_id = i;\r\n            for (let j = i + 1; j < ARRAY_SIZE; j++) {\r\n                // Color bars being compared\r\n                array[min_id].color = PIVOT_COLOR;\r\n                array[j].color = COMP_COLOR;\r\n                this.addAnimation(array);\r\n                // Uncolor comp bars\r\n                array[min_id].color = START_COLOR;\r\n                array[j].color = START_COLOR;\r\n                if (array[j].value < array[min_id].value) {\r\n                    min_id = j;\r\n                }\r\n            }\r\n            // Swap min element with 1st element in unsorted array\r\n            array[i] = array.splice(min_id, 1, array[i])[0];\r\n            array[i].color = FINISH_COLOR;\r\n            this.addAnimation(array);\r\n        }\r\n    }\r\n\r\n    quickSortHelper() {\r\n        var arr = this.state.array;\r\n        this.quickSort(arr, 0, ARRAY_SIZE - 1, 0);\r\n    }\r\n\r\n    quickSortPartition(arr, low, high) {\r\n        var pivot = arr[high];\r\n        var i = low - 1;\r\n        for (var j = low; j < high; j++) {\r\n            arr[j].color = COMP_COLOR;\r\n            if (arr[j].value < pivot.value) {\r\n                i++;\r\n\r\n                if (i > 0 && i > low) arr[i - 1].color = START_COLOR;\r\n                arr[i].color = COMP_COLOR;\r\n\r\n                [arr[i], arr[j]] = [arr[j], arr[i]];\r\n            }\r\n            this.addAnimation(arr);\r\n            arr[j].color = PIVOT_COLOR;\r\n        }\r\n        [arr[i + 1], arr[high]] = [arr[high], arr[i + 1]];\r\n\r\n        // Recolor all bars that were partitioned around the pivot\r\n        if (i > 0 && i > low) arr[i].color = START_COLOR;\r\n        for (let j = i+2; j <= high; j++) {\r\n            arr[j].color = START_COLOR;\r\n        }\r\n        // arr[i+1] is now in sorted position\r\n        arr[i+1].color = FINISH_COLOR;\r\n        this.addAnimation(arr);\r\n\r\n        return i + 1;\r\n    }\r\n\r\n    quickSort(arr, low, high) {\r\n        if (low <= high) {\r\n            var pi = this.quickSortPartition(arr, low, high);\r\n            this.quickSort(arr, low, pi - 1);\r\n            this.quickSort(arr, pi + 1, high);\r\n        }\r\n    }\r\n\r\n    bubbleSort() {\r\n        let array = this.state.array;\r\n\r\n        for (let i = 0; i < ARRAY_SIZE - 1; i++) {\r\n            for (let j = 0; j < ARRAY_SIZE - i - 1; j++) {\r\n                // Swap elements j and j+1 if needed\r\n                if (array[j].value > array[j + 1].value) {\r\n                    array[j] = array.splice(j + 1, 1, array[j])[0];\r\n                }\r\n\r\n                // Change bars to comp color\r\n                array[j].color = COMP_COLOR;\r\n                if (j + 1 === ARRAY_SIZE - i - 1) {\r\n                    array[j + 1].color = FINISH_COLOR;\r\n                } else {\r\n                    array[j + 1].color = COMP_COLOR;\r\n                }\r\n\r\n                this.addAnimation(array);\r\n\r\n                // Change bars back to start color after done comparing\r\n                array[j].color = START_COLOR;\r\n                if (j + 1 < ARRAY_SIZE - i - 1) {\r\n                    array[j + 1].color = START_COLOR;\r\n                }\r\n\r\n                // Edge case for after every element has been sorted\r\n                if (i === ARRAY_SIZE - 2) {\r\n                    array[0].color = FINISH_COLOR;\r\n                    this.addAnimation(array);\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    render() {\r\n        const dropdownOptions = [\r\n            { value: \"selection\", label: \"Selection Sort\" },\r\n            { value: \"quick\", label: \"Quick Sort\" },\r\n            { value: \"bubble\", label: \"Bubble Sort\" }\r\n        ];\r\n        return (\r\n            <div className=\"visualizer\">\r\n                <nav>\r\n                    <ul>\r\n                        <li className=\"slider\">\r\n                            {\" \"}\r\n                            Array Size\r\n                            <Slider min={5} max={200} value={ARRAY_SIZE} orientation=\"horizontal\" onChange={this.handleArraySliderChange} tooltip={false} />\r\n                        </li>\r\n                        <li className=\"slider\">\r\n                            Animation Speed\r\n                            <Slider min={0.01} max={0.2} step={0.001} format={value => Math.floor(value * 1000)} value={this.state.animationSpeed} orientation=\"horizontal\" onChange={this.handleAnimationSliderChange} tooltip={false} />\r\n                        </li>\r\n                        <li className=\"dropdown\">\r\n                            <Dropdown value={this.state.algorithm} ref=\"algorithm\" options={dropdownOptions} placeholder=\"Select a sorting algorithm\" onChange={this.handleDropdownChange} />\r\n                        </li>\r\n                        <li>\r\n                            <button\r\n                                onClick={() => {\r\n                                    if (this.isSorting || this.isSorted) {\r\n                                        return;\r\n                                    }\r\n                                    this.isSorting = true;\r\n                                    this.isComputing = true;\r\n                                    switch (this.state.algorithm) {\r\n                                        case \"selection\":\r\n                                            this.selectionSort();\r\n                                            break;\r\n                                        case \"quick\":\r\n                                            this.quickSortHelper();\r\n                                            break;\r\n                                        case \"bubble\":\r\n                                            this.bubbleSort();\r\n                                            break;\r\n                                        default:\r\n                                    }\r\n                                    this.initEndSequence();\r\n                                }}\r\n                            >\r\n                                Sort\r\n                            </button>\r\n                        </li>\r\n                        <li>\r\n                            <button onClick={() => this.generateArray()}>Generate New Array</button>\r\n                        </li>\r\n                        <li>\r\n                            <a href=\"https://github.com/camgraff/sorting-algorithm-visualizer\" id=\"gh-link\">\r\n                                View Code\r\n                            </a>\r\n                        </li>\r\n                        <li>\r\n                            <a href=\"https://camgraff.github.io\" id=\"back-button\">\r\n                                camgraff.github.io\r\n                            </a>\r\n                        </li>\r\n                    </ul>\r\n                </nav>\r\n\r\n                <div className=\"array-container\">\r\n                    {this.state.array.map((el, id) => (\r\n                        <div\r\n                            className=\"array-bar\"\r\n                            key={id}\r\n                            style={{\r\n                                backgroundColor: el.color,\r\n                                height: `${el.value / (MAX_ARRAY_VAL / HEIGHT_PROP)}vh`,\r\n                                width: `${WIDTH_PROP / ARRAY_SIZE}vw`\r\n                            }}\r\n                        ></div>\r\n                    ))}\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Visualizer;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport Visualizer from './Visualizer';\nimport * as serviceWorker from './serviceWorker';\n\n\n\nReactDOM.render(<Visualizer />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}