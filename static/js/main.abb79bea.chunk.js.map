{"version":3,"sources":["Visualizer.jsx","serviceWorker.js","index.js"],"names":["ARRAY_SIZE","timerIds","animations","isSorted","Visualizer","props","handleArraySliderChange","value","generateArray","handleAnimationSliderChange","forEach","clearTimeout","setState","animationSpeed","state","array","this","bgColor","arrayBars","document","getElementsByClassName","i","style","backgroundColor","arr","push","Math","floor","random","prevMinId","setTimeout","min_id","j","height","splice","prevBar1","prevBar2","sorted","includes","bar1","bar2","isPiv","length","quickSort","doAnimations","low","high","pivot","counter","pi","quickSortPartition","console","log","className","href","id","min","max","orientation","onChange","step","format","onClick","selectionSort","quickSortHelper","map","val","key","width","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.abb79bea.chunk.js","sourcesContent":["import React from \"react\";\r\nimport \"./Visualizer.css\";\r\nimport Slider from \"react-rangeslider\";\r\nimport \"react-rangeslider/lib/index.css\";\r\n\r\nvar ARRAY_SIZE = 100;\r\nconst MAX_ARRAY_VAL = 1000;\r\n\r\n//percent of screen that array container div uses\r\nconst HEIGHT_PROP = 80;\r\nconst WIDTH_PROP = 60;\r\n\r\n//array of times used to cancel sorting animations\r\nvar timerIds = [];\r\n\r\n//bar colors\r\nconst START_COLOR = \"red\";\r\nconst COMP_COLOR = \"yellow\";\r\nconst FINISH_COLOR = \"blue\";\r\n\r\nvar animations = [];\r\n\r\nvar isSorted = false;\r\n\r\nclass Visualizer extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      array: [],\r\n      animationSpeed: 0.1\r\n    };\r\n  }\r\n\r\n  componentDidMount() {\r\n    this.generateArray();\r\n  }\r\n\r\n  componentDidUpdate() {\r\n    let bgColor;\r\n    if (isSorted) bgColor = FINISH_COLOR;\r\n    else bgColor = START_COLOR;\r\n    //set bar colors back to red if unsorted\r\n    var arrayBars = document.getElementsByClassName(\"array-bar\");\r\n    for (var i = 0; i < ARRAY_SIZE; i++) {\r\n      arrayBars[i].style.backgroundColor = bgColor;\r\n    }\r\n  }\r\n\r\n  generateArray() {\r\n    //reset animations\r\n    animations = [];\r\n\r\n    //stop the animation if function is called while sorting\r\n    timerIds.forEach(function(value) {\r\n      clearTimeout(value);\r\n    });\r\n\r\n    //populate array values\r\n    const arr = [];\r\n    for (var i = 0; i < ARRAY_SIZE; i++) {\r\n      arr.push(Math.floor(Math.random() * MAX_ARRAY_VAL));\r\n    }\r\n    isSorted = false;\r\n    this.setState({ array: arr });\r\n  }\r\n\r\n  selectionSort() {\r\n    if (isSorted) return;\r\n    //stop the animation if function is called while sorting\r\n    timerIds.forEach(function(value) {\r\n      clearTimeout(value);\r\n    });\r\n\r\n    var array = this.state.array;\r\n    var arrayBars = document.getElementsByClassName(\"array-bar\");\r\n    var prevMinId = 0;\r\n    for (let i = 0; i < ARRAY_SIZE; i++) {\r\n      timerIds.push(\r\n        setTimeout(() => {\r\n          var min_id = i;\r\n          for (let j = i + 1; j < ARRAY_SIZE; j++) {\r\n            if (array[j] < array[min_id]) min_id = j;\r\n          }\r\n\r\n          //recolor previous yellow bar back to red since no longer being swapped\r\n          if (prevMinId > i)\r\n            arrayBars[prevMinId].style.backgroundColor = START_COLOR;\r\n          prevMinId = min_id;\r\n          //color bar that is being swapped yellow\r\n          arrayBars[min_id].style.height = `${array[i] /\r\n            (MAX_ARRAY_VAL / HEIGHT_PROP)}vh`;\r\n          arrayBars[min_id].style.backgroundColor = COMP_COLOR;\r\n          //color minimum value bar blue since it will be in sorted order\r\n          arrayBars[i].style.height = `${array[min_id] /\r\n            (MAX_ARRAY_VAL / HEIGHT_PROP)}vh`;\r\n          arrayBars[i].style.backgroundColor = FINISH_COLOR;\r\n          //swap array values\r\n          array[i] = array.splice(min_id, 1, array[i])[0];\r\n        }, i / this.state.animationSpeed)\r\n      );\r\n    }\r\n    isSorted = true;\r\n  }\r\n\r\n  doAnimations() {\r\n    var arrayBars = document.getElementsByClassName(\"array-bar\");\r\n    var prevBar1;\r\n    var prevBar2;\r\n    var sorted = [];\r\n    //animations\r\n    for (let i = 0; i < animations.length; i++) {\r\n      timerIds.push(\r\n        setTimeout(() => {\r\n          if (i > 0) {\r\n            if (!sorted.includes(prevBar1[0]))\r\n              arrayBars[prevBar1[0]].style.backgroundColor = START_COLOR;\r\n            if (!sorted.includes(prevBar2[0]))\r\n              arrayBars[prevBar2[0]].style.backgroundColor = START_COLOR;\r\n          }\r\n          const bar1 = animations[i][0];\r\n          const bar2 = animations[i][1];\r\n          const isPiv = animations[i][2];\r\n          arrayBars[bar1[0]].style.height = `${bar2[1] /\r\n            (MAX_ARRAY_VAL / HEIGHT_PROP)}vh`;\r\n          arrayBars[bar1[0]].style.backgroundColor = COMP_COLOR;\r\n          arrayBars[bar2[0]].style.height = `${bar1[1] /\r\n            (MAX_ARRAY_VAL / HEIGHT_PROP)}vh`;\r\n          arrayBars[bar2[0]].style.backgroundColor = COMP_COLOR;\r\n          if (isPiv === 1) {\r\n            sorted.push(bar1[0]);\r\n            arrayBars[bar1[0]].style.backgroundColor = FINISH_COLOR;\r\n          }\r\n          prevBar1 = bar1;\r\n          prevBar2 = bar2;\r\n        }, i / this.state.animationSpeed)\r\n      );\r\n    }\r\n  }\r\n\r\n  quickSortHelper() {\r\n    if (isSorted) return;\r\n    //stop the animation if function is called while sorting\r\n    timerIds.forEach(function(value) {\r\n      clearTimeout(value);\r\n    });\r\n    var arr = this.state.array\r\n    this.quickSort(arr, 0, ARRAY_SIZE - 1, 0);\r\n    this.doAnimations();\r\n    isSorted = true;\r\n  }\r\n\r\n  quickSortPartition(arr, low, high) {\r\n    var pivot = arr[high];\r\n    var i = low - 1;\r\n    for (var j = low; j < high; j++) {\r\n      if (arr[j] < pivot) {\r\n        i++;\r\n        animations.push([[i, arr[i]], [j, arr[j]], 0]);\r\n        arr[i] = arr.splice(j, 1, arr[i])[0];\r\n      }\r\n    }\r\n    animations.push([[i + 1, arr[i + 1]], [high, arr[high]], 1]);\r\n    arr[i + 1] = arr.splice(high, 1, arr[i + 1])[0];\r\n    return i + 1;\r\n  }\r\n\r\n  quickSort(arr, low, high, counter) {\r\n    if (low <= high) {\r\n      var pi = this.quickSortPartition(arr, low, high, counter);\r\n      this.quickSort(arr, low, pi - 1, counter + 1);\r\n      this.quickSort(arr, pi + 1, high, counter + 1);\r\n    }\r\n  }\r\n\r\n  handleArraySliderChange = value => {\r\n    ARRAY_SIZE = value;\r\n    this.generateArray();\r\n  };\r\n\r\n  handleAnimationSliderChange = value => {\r\n    animations = [];\r\n    //stop the animation if function is called while sorting\r\n    timerIds.forEach(function(value) {\r\n      clearTimeout(value);\r\n    });\r\n    this.setState({ animationSpeed: value });\r\n  };\r\n\r\n  render() {\r\n    console.log(isSorted);\r\n    return (\r\n      <div className=\"container\">\r\n        <div className=\"button-container\">\r\n          <a href=\"https://camgraff.github.io\" id=\"back-button\">\r\n            Back to camgraff.github.io\r\n          </a>\r\n          <a\r\n            href=\"https://github.com/camgraff/sorting-algorithm-visualizer\"\r\n            id=\"gh-link\"\r\n          >\r\n            View Code on Github\r\n          </a>\r\n          <div className=\"slider\">\r\n            {\" \"}\r\n            Array Size\r\n            <Slider\r\n              min={5}\r\n              max={200}\r\n              value={ARRAY_SIZE}\r\n              orientation=\"horizontal\"\r\n              onChange={this.handleArraySliderChange}\r\n            />\r\n          </div>\r\n          <div className=\"slider\">\r\n            Animation Speed\r\n            <Slider\r\n              min={0.01}\r\n              max={0.2}\r\n              step={0.001}\r\n              format={value => Math.floor(value * 1000)}\r\n              value={this.state.animationSpeed}\r\n              orientation=\"horizontal\"\r\n              onChange={this.handleAnimationSliderChange}\r\n            />\r\n          </div>\r\n          <button onClick={() => this.selectionSort()}> Selection Sort </button>\r\n          <button onClick={() => this.quickSortHelper()}> Quick Sort </button>\r\n          <button onClick={() => this.generateArray()}>\r\n            {\" \"}\r\n            Generate New Array{\" \"}\r\n          </button>\r\n        </div>\r\n        <div className=\"array-container\">\r\n          {this.state.array.map((val, id) => (\r\n            <div\r\n              className=\"array-bar\"\r\n              key={id}\r\n              style={{\r\n                backgroundColor: START_COLOR,\r\n                height: `${val / (MAX_ARRAY_VAL / HEIGHT_PROP)}vh`,\r\n                width: `${WIDTH_PROP / ARRAY_SIZE}vw`\r\n              }}\r\n            ></div>\r\n          ))}\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Visualizer;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport Visualizer from './Visualizer';\nimport * as serviceWorker from './serviceWorker';\n\n\n\nReactDOM.render(<Visualizer />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}