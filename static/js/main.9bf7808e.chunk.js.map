{"version":3,"sources":["Visualizer.jsx","serviceWorker.js","index.js"],"names":["timerIds","Visualizer","props","state","array","this","generateArray","arrayBars","document","getElementsByClassName","i","style","backgroundColor","forEach","value","clearTimeout","arr","push","Math","floor","random","setState","prevMinId","setTimeout","min_id","j","height","splice","low","high","delay","prevBar1","prevBar2","animations","stack","top","pivot","sorted","includes","bar1","bar2","isPiv","length","className","classname","onClick","selectionSort","quickSort","ARRAY_SIZE","map","val","id","key","width","WIDTH_PROP","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.9bf7808e.chunk.js","sourcesContent":["import React from 'react';\r\nimport './Visualizer.css'\r\n\r\nconst ARRAY_SIZE = 50;\r\nconst MAX_ARRAY_VAL = 1000;\r\n\r\n//percent of screen that array container div uses\r\nconst HEIGHT_PROP = 60;\r\nconst WIDTH_PROP = 60;\r\n\r\nconst ANIMATION_SPEED = 50;\r\n\r\n//array of times used to cancel sorting animations\r\nvar timerIds = [];\r\n\r\n//bar colors\r\nconst START_COLOR = \"red\";\r\nconst COMP_COLOR = \"yellow\";\r\nconst FINISH_COLOR = \"blue\";\r\n\r\nvar counter = 0;\r\n\r\n\r\nclass Visualizer extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n          array: [],\r\n        };\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.generateArray();\r\n    }\r\n\r\n    componentDidUpdate() {\r\n        //set bar colors back to red\r\n        var arrayBars = document.getElementsByClassName(\"array-bar\");\r\n        for (var i=0; i<ARRAY_SIZE; i++) {\r\n            arrayBars[i].style.backgroundColor = START_COLOR;\r\n        }\r\n    }\r\n\r\n    generateArray() {\r\n        //reset counter\r\n        counter = 0;\r\n\r\n        //stop the animation if function is called while sorting\r\n        timerIds.forEach(function(value) {clearTimeout(value)});\r\n\r\n        //populate array values\r\n        const arr = [];\r\n        for (var i=0; i<ARRAY_SIZE; i++) {\r\n            arr.push(Math.floor((Math.random()*MAX_ARRAY_VAL)));\r\n        }\r\n        this.setState({array:arr});\r\n    }\r\n\r\n    selectionSort() {\r\n        var array = this.state.array;\r\n        var arrayBars = document.getElementsByClassName(\"array-bar\");\r\n        var prevMinId = 0;\r\n        for (let i = 0; i<ARRAY_SIZE; i++) {\r\n            timerIds.push(setTimeout(() => {\r\n                var min_id = i;  \r\n                for (let j = i+1; j<ARRAY_SIZE; j++) { \r\n                    if (array[j] < array[min_id])  \r\n                        min_id = j; \r\n                }\r\n               \r\n                //recolor previous yellow bar back to red since no longer being swapped\r\n                if (prevMinId > i) arrayBars[prevMinId].style.backgroundColor = START_COLOR;\r\n                prevMinId = min_id; \r\n                //color bar that is being swapped yellow\r\n                arrayBars[min_id].style.height = `${array[i]/(MAX_ARRAY_VAL/HEIGHT_PROP)}vh`;\r\n                arrayBars[min_id].style.backgroundColor = COMP_COLOR;\r\n                //color minimum value bar blue since it will be in sorted order\r\n                arrayBars[i].style.height = `${array[min_id]/(MAX_ARRAY_VAL/HEIGHT_PROP)}vh`;\r\n                arrayBars[i].style.backgroundColor = FINISH_COLOR;\r\n                //swap array values\r\n                array[i] = array.splice(min_id, 1, array[i])[0];\r\n            }, ANIMATION_SPEED*i));\r\n        }\r\n    }\r\n\r\n    quickSort(arr, low, high, arrayBars, delay) {\r\n        var animations = []\r\n        \r\n        //TODO fix animations so left anf right play at the same time\r\n        var leftAnimations = [];\r\n        var RightAnimations = [];\r\n        var temp = arr;\r\n        /* //setTimeout(() => {\r\n            if (low < high) {\r\n                var pi = this.quickSortPartition(arr, low, high, arrayBars, delay);\r\n                this.quickSort(arr, low, pi-1, arrayBars, ANIMATION_SPEED*(pi-low+2)+delay);\r\n                this.quickSort(arr, pi+1, high, arrayBars, ANIMATION_SPEED*(pi-low+2)+delay);\r\n            }\r\n            //console.log(arr);\r\n        //}, 5000*counter); */\r\n\r\n        //iterative version, taken from https://www.geeksforgeeks.org/iterative-quick-sort/\r\n        var stack = [];\r\n        var top = -1;\r\n        stack[++top] = low;\r\n        stack[++top] = high;\r\n\r\n        // Keep popping from stack while is not empty \r\n        while (top >= 0) {\r\n            // Pop h and l \r\n            high = stack[top--]; \r\n            low = stack[top--]; \r\n\r\n            // Set pivot element at its correct position \r\n            // in sorted array \r\n            //var pivot = this.quickSortPartition(arr, low, high, arrayBars, delay); \r\n\r\n            //parition\r\n            var pivot = arr[high];\r\n            var i = low - 1;\r\n            for (var j=low; j<high; j++) {\r\n                if (arr[j] < pivot) {\r\n                    i++;\r\n                    //setTimeout(() => {\r\n                        /* arrayBars[i].style.height = `${arr[j]/(MAX_ARRAY_VAL/HEIGHT_PROP)}vh`;\r\n                        arrayBars[j].style.height = `${arr[i]/(MAX_ARRAY_VAL/HEIGHT_PROP)}vh`; */\r\n                    //}, ANIMATION_SPEED*counter);\r\n                    animations.push([ [i, arr[i]], [j, arr[j]], 0 ]);\r\n                    counter++;\r\n                    arr[i] = arr.splice(j, 1, arr[i])[0];            }\r\n            }\r\n            //setTimeout(() => {\r\n                /* arrayBars[i+1].style.height = `${arr[high]/(MAX_ARRAY_VAL/HEIGHT_PROP)}vh`;\r\n                arrayBars[high].style.height = `${arr[i+1]/(MAX_ARRAY_VAL/HEIGHT_PROP)}vh`; */\r\n            //}, ANIMATION_SPEED*counter);\r\n            animations.push([ [i+1, arr[i+1]], [high, arr[high]], 1 ]);\r\n            arr[i+1] = arr.splice(high, 1, arr[i+1])[0];\r\n            pivot = i+1;\r\n\r\n\r\n            // If there are elements on left side of pivot, \r\n            // then push left side to stack \r\n            if (pivot - 1 >= low) { \r\n                stack[++top] = low; \r\n                stack[++top] = pivot - 1; \r\n            } \r\n\r\n            // If there are elements on right side of pivot, \r\n            // then push right side to stack \r\n            if (pivot + 1 <= high) { \r\n                stack[++top] = pivot + 1; \r\n                stack[++top] = high; \r\n            } \r\n        }\r\n\r\n        var prevBar1;\r\n        var prevBar2;\r\n        var sorted = [];\r\n        //animations\r\n        for (let i=0; i<animations.length; i++) {\r\n            timerIds.push(setTimeout(() => {\r\n                if (i>0) {\r\n                    if (!sorted.includes(prevBar1[0])) arrayBars[prevBar1[0]].style.backgroundColor = START_COLOR;\r\n                    if (!sorted.includes(prevBar2[0])) arrayBars[prevBar2[0]].style.backgroundColor = START_COLOR;\r\n                }\r\n                const bar1 = animations[i][0];\r\n                const bar2 = animations[i][1];\r\n                const isPiv = animations[i][2];\r\n                arrayBars[bar1[0]].style.height = `${bar2[1]/(MAX_ARRAY_VAL/HEIGHT_PROP)}vh`;\r\n                arrayBars[bar1[0]].style.backgroundColor = COMP_COLOR;\r\n                arrayBars[bar2[0]].style.height = `${bar1[1]/(MAX_ARRAY_VAL/HEIGHT_PROP)}vh`;\r\n                arrayBars[bar2[0]].style.backgroundColor = COMP_COLOR;\r\n                if (isPiv == 1) {\r\n                    sorted.push(bar1[0]);\r\n                    arrayBars[bar1[0]].style.backgroundColor = FINISH_COLOR;\r\n                }\r\n                prevBar1 = bar1;\r\n                prevBar2 = bar2;\r\n            }, ANIMATION_SPEED*i));\r\n        }\r\n    }\r\n\r\n    quickSortPartition(arr, low, high, arrayBars) {\r\n        var pivot = arr[high];\r\n        var i = low - 1;\r\n        for (var j=low; j<high; j++) {\r\n            if (arr[j] < pivot) {\r\n                i++;\r\n                arrayBars[i].style.height = `${arr[j]/(MAX_ARRAY_VAL/HEIGHT_PROP)}vh`;\r\n                arrayBars[j].style.height = `${arr[i]/(MAX_ARRAY_VAL/HEIGHT_PROP)}vh`;\r\n                arr[i] = arr.splice(j, 1, arr[i])[0];            }\r\n        }\r\n        arrayBars[i+1].style.height = `${arr[high]/(MAX_ARRAY_VAL/HEIGHT_PROP)}vh`;\r\n        arrayBars[i+1].style.backgroundColor = FINISH_COLOR;\r\n        arrayBars[high].style.height = `${arr[i+1]/(MAX_ARRAY_VAL/HEIGHT_PROP)}vh`;\r\n        arr[i+1] = arr.splice(high, 1, arr[i+1])[0];\r\n        return i+1;\r\n    }\r\n\r\n    render() {\r\n        return(\r\n            <div className=\"container\">\r\n                <div classname=\"button-container\">\r\n                    <button onClick={() => this.selectionSort()}> Selection Sort </button>\r\n                    <button onClick={() => this.quickSort(this.state.array, 0, ARRAY_SIZE-1, document.getElementsByClassName(\"array-bar\"))}> Quick Sort </button>\r\n                    <button onClick={() => this.generateArray()}> Generate New Array </button>\r\n                </div>\r\n                {this.state.array.map((val, id) => (\r\n                    <div \r\n                        className=\"array-bar\"\r\n                        key={id}\r\n                        style={{\r\n                            backgroundColor: START_COLOR,\r\n                            height: `${val/(MAX_ARRAY_VAL/HEIGHT_PROP)}vh`,\r\n                            width: `${WIDTH_PROP/ARRAY_SIZE}vw`\r\n                        }}\r\n                    ></div>\r\n                ))}\r\n            </div>\r\n        )\r\n    }\r\n\r\n}\r\n\r\nexport default Visualizer","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport Visualizer from './Visualizer';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<Visualizer />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}