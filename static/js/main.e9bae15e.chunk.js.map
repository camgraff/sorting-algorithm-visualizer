{"version":3,"sources":["Visualizer.jsx","serviceWorker.js","index.js"],"names":["timerIds","Visualizer","props","state","array","this","generateArray","arrayBars","document","getElementsByClassName","i","style","backgroundColor","forEach","value","clearTimeout","arr","push","Math","floor","random","setState","prevMinId","setTimeout","min_id","j","height","splice","className","classname","onClick","selectionSort","map","val","id","key","width","WIDTH_PROP","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"mRAWIA,G,MAAW,IAqFAC,E,YAlFX,WAAYC,GAAQ,IAAD,8BACf,4CAAMA,KACDC,MAAQ,CACXC,MAAO,IAHM,E,iFAQfC,KAAKC,kB,2CAML,IADA,IAAIC,EAAYC,SAASC,uBAAuB,aACvCC,EAAE,EAAGA,EAzBH,IAyBiBA,IACxBH,EAAUG,GAAGC,MAAMC,gBAAkB,Q,sCAMzCZ,EAASa,SAAQ,SAASC,GAAQC,aAAaD,MAI/C,IADA,IAAME,EAAM,GACHN,EAAE,EAAGA,EApCH,IAoCiBA,IACxBM,EAAIC,KAAKC,KAAKC,MApCJ,IAoCWD,KAAKE,WAE9Bf,KAAKgB,SAAS,CAACjB,MAAMY,M,sCAOrB,IAHA,IAAIZ,EAAQC,KAAKF,MAAMC,MACnBG,EAAYC,SAASC,uBAAuB,aAC5Ca,EAAY,EAHJ,WAIHZ,GACLV,EAASiB,KAAKM,YAAW,WAErB,IADA,IAAIC,EAASd,EACJe,EAAIf,EAAE,EAAGe,EAjDf,IAiD6BA,IACxBrB,EAAMqB,GAAKrB,EAAMoB,KACjBA,EAASC,GAIbH,EAAYZ,IAAGH,EAAUe,GAAWX,MAAMC,gBAAkB,OAChEU,EAAYE,EAEZjB,EAAUiB,GAAQb,MAAMe,OAAxB,UAAoCtB,EAAMM,IAzDpC,IAGF,IAsDJ,MACAH,EAAUiB,GAAQb,MAAMC,gBAAkB,SAE1CL,EAAUG,GAAGC,MAAMe,OAAnB,UAA+BtB,EAAMoB,IA5D/B,IAGF,IAyDJ,MACAjB,EAAUG,GAAGC,MAAMC,gBAAkB,OAErCR,EAAMM,GAAKN,EAAMuB,OAAOH,EAAQ,EAAGpB,EAAMM,IAAI,KAC9C,GAAGA,KAnBDA,EAAI,EAAGA,EA9CL,IA8CmBA,IAAM,EAA3BA,K,+BAuBH,IAAD,OACL,OACI,yBAAKkB,UAAU,aACX,yBAAKC,UAAU,oBACX,4BAAQC,QAAS,kBAAM,EAAKC,kBAA5B,UACA,4BAAQD,QAAS,kBAAM,EAAKxB,kBAA5B,yBAEHD,KAAKF,MAAMC,MAAM4B,KAAI,SAACC,EAAKC,GAAN,OAClB,yBACIN,UAAU,YACVO,IAAKD,EACLvB,MAAO,CACHC,gBAAiB,MACjBc,OAAO,GAAD,OAAKO,GAjFjB,IAGF,IA8Ec,MACNG,MAAM,GAAD,OAAKC,GAAL,iB,GAzERC,IAAMC,WCDXC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAAgBtC,SAASuC,eAAe,SD2HlD,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,iB","file":"static/js/main.e9bae15e.chunk.js","sourcesContent":["import React from 'react';\r\nimport './Visualizer.css'\r\n\r\nconst ARRAY_SIZE = 100;\r\nconst MAX_ARRAY_VAL = 1000;\r\n\r\n//percent of screen that array container div uses\r\nconst HEIGHT_PROP = 60;\r\nconst WIDTH_PROP = 60;\r\n\r\n//timer used to cancel animations\r\nvar timerIds = [];\r\n\r\nclass Visualizer extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n          array: [],\r\n        };\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.generateArray();\r\n    }\r\n\r\n    componentDidUpdate() {\r\n        //set bar colors back to red\r\n        var arrayBars = document.getElementsByClassName(\"array-bar\");\r\n        for (var i=0; i<ARRAY_SIZE; i++) {\r\n            arrayBars[i].style.backgroundColor = \"red\";\r\n        }\r\n    }\r\n\r\n    generateArray() {\r\n        //stop the animation if called while sorting\r\n        timerIds.forEach(function(value) {clearTimeout(value)});\r\n\r\n        //populate array values\r\n        const arr = [];\r\n        for (var i=0; i<ARRAY_SIZE; i++) {\r\n            arr.push(Math.floor((Math.random()*MAX_ARRAY_VAL)));\r\n        }\r\n        this.setState({array:arr});\r\n    }\r\n\r\n    selectionSort() {\r\n        var array = this.state.array;\r\n        var arrayBars = document.getElementsByClassName(\"array-bar\");\r\n        var prevMinId = 0;\r\n        for (let i = 0; i<ARRAY_SIZE; i++) {\r\n            timerIds.push(setTimeout(() => {\r\n                var min_id = i;  \r\n                for (let j = i+1; j<ARRAY_SIZE; j++) { \r\n                    if (array[j] < array[min_id])  \r\n                        min_id = j; \r\n                }\r\n               \r\n                //recolor previous yellow bar back to red since no longer being swapped\r\n                if (prevMinId > i) arrayBars[prevMinId].style.backgroundColor = \"red\";\r\n                prevMinId = min_id; \r\n                //color bar that is being swapped yellow\r\n                arrayBars[min_id].style.height = `${array[i]/(MAX_ARRAY_VAL/HEIGHT_PROP)}vh`\r\n                arrayBars[min_id].style.backgroundColor = \"yellow\";\r\n                //color minimum value bar blue since it will be in sorted order\r\n                arrayBars[i].style.height = `${array[min_id]/(MAX_ARRAY_VAL/HEIGHT_PROP)}vh`\r\n                arrayBars[i].style.backgroundColor = \"blue\";\r\n                //swap array values\r\n                array[i] = array.splice(min_id, 1, array[i])[0];\r\n            }, 50*i));\r\n        }\r\n    }\r\n\r\n    render() {\r\n        return(\r\n            <div className=\"container\">\r\n                <div classname=\"button-container\">\r\n                    <button onClick={() => this.selectionSort()}> Sort </button>\r\n                    <button onClick={() => this.generateArray()}> Generate New Array </button>\r\n                </div>\r\n                {this.state.array.map((val, id) => (\r\n                    <div \r\n                        className=\"array-bar\"\r\n                        key={id}\r\n                        style={{\r\n                            backgroundColor: \"red\",\r\n                            height: `${val/(MAX_ARRAY_VAL/HEIGHT_PROP)}vh`,\r\n                            width: `${WIDTH_PROP/ARRAY_SIZE}vw`\r\n                        }}\r\n                    ></div>\r\n                ))}\r\n            </div>\r\n        )\r\n    }\r\n\r\n}\r\n\r\nexport default Visualizer","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport Visualizer from './Visualizer';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<Visualizer />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}