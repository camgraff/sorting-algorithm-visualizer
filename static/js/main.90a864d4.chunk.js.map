{"version":3,"sources":["Visualizer.jsx","serviceWorker.js","index.js"],"names":["_","require","ARRAY_SIZE","Visualizer","props","handleArraySliderChange","value","generateArray","handleAnimationSliderChange","setState","animationSpeed","handleDropdownChange","event","algorithm","isSorted","isSorting","timerIds","animations","state","array","this","forEach","clearTimeout","arr","i","push","Math","floor","random","color","cloneDeep","count","shift","setTimeout","length","animationCount","runAnimations","min_id","j","addAnimation","splice","quickSort","low","high","pivot","pi","quickSortPartition","className","min","max","orientation","onChange","tooltip","step","format","ref","options","label","placeholder","onClick","selectionSort","quickSortHelper","bubbleSort","initEndSequence","href","id","map","el","key","style","backgroundColor","height","width","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.90a864d4.chunk.js","sourcesContent":["import React from \"react\";\r\nimport \"./Visualizer.scss\";\r\nimport Slider from \"react-rangeslider\";\r\nimport \"react-rangeslider/lib/index.css\";\r\nimport Dropdown from \"react-dropdown\";\r\nimport \"react-dropdown/style.css\";\r\nvar _ = require(\"lodash\");\r\n\r\nvar ARRAY_SIZE = 100;\r\nconst MAX_ARRAY_VAL = 1000;\r\n\r\n//percent of screen that array container div uses\r\nconst HEIGHT_PROP = 70;\r\nconst WIDTH_PROP = 60;\r\n\r\n//bar colors\r\nconst START_COLOR = \"red\";\r\nconst COMP_COLOR = \"yellow\";\r\nconst FINISH_COLOR = \"blue\";\r\nconst PIVOT_COLOR = \"green\";\r\n\r\nclass Visualizer extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.isSorted = false;\r\n        this.isSorting = false;\r\n        // Timer Ids used to cancel sorting animation\r\n        this.timerIds = [];\r\n        this.animations = [];\r\n\r\n        this.state = {\r\n            array: [],\r\n            animationSpeed: 0.1,\r\n            algorithm: \"\"\r\n        };\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.generateArray();\r\n    }\r\n\r\n    generateArray() {\r\n        // Stop any animations currently running\r\n        this.timerIds.forEach(function(value) {\r\n            clearTimeout(value);\r\n        });\r\n        this.timerIds = [];\r\n        this.animations = [];\r\n        this.isSorted = false;\r\n        this.isSorting = false;\r\n\r\n        // Populate the array\r\n        let arr = [];\r\n        for (var i = 0; i < ARRAY_SIZE; i++) {\r\n            arr.push({\r\n                value: Math.floor(Math.random() * MAX_ARRAY_VAL),\r\n                color: START_COLOR\r\n            });\r\n        }\r\n        this.setState({\r\n            array: arr\r\n        });\r\n    }\r\n\r\n    addAnimation(array) {\r\n        // cloneDeep is necessary since the array is made up of objects\r\n        this.animations.push(_.cloneDeep(array));\r\n    }\r\n\r\n    runAnimations() {\r\n        var count = 0;\r\n        while (this.animations.length > 0) {\r\n            let arr = this.animations.shift();\r\n            this.timerIds.push(\r\n                setTimeout(() => {\r\n                    this.setState({ array: arr });\r\n                }, count++ / this.state.animationSpeed)\r\n            );\r\n        }\r\n        // Cleanup after all animations have finished\r\n        this.timerIds.push(\r\n            setTimeout(() => {\r\n                this.isSorting = false;\r\n                this.isSorted = true;\r\n            }, count / this.animationCount)\r\n        );\r\n    }\r\n\r\n    // Called after any sorting algorithm completes and animations are pending\r\n    initEndSequence() {\r\n        this.runAnimations();\r\n    }\r\n\r\n    handleArraySliderChange = value => {\r\n        if (value !== ARRAY_SIZE) {\r\n            ARRAY_SIZE = value;\r\n            this.generateArray();\r\n        }\r\n    };\r\n\r\n    handleAnimationSliderChange = value => {\r\n        this.setState({ animationSpeed: value });\r\n    };\r\n\r\n    handleDropdownChange = event => {\r\n        this.setState({ algorithm: event.value });\r\n    };\r\n\r\n    /* SORTING ALGORITHMS */\r\n\r\n    selectionSort() {\r\n        let array = this.state.array;\r\n\r\n        for (let i = 0; i < ARRAY_SIZE; i++) {\r\n            // Find minimum element in unsorted array\r\n            var min_id = i;\r\n            for (let j = i + 1; j < ARRAY_SIZE; j++) {\r\n                // Color bars being compared\r\n                array[min_id].color = PIVOT_COLOR;\r\n                array[j].color = COMP_COLOR;\r\n                this.addAnimation(array);\r\n                // Uncolor comp bars\r\n                array[min_id].color = START_COLOR;\r\n                array[j].color = START_COLOR;\r\n                if (array[j].value < array[min_id].value) {\r\n                    min_id = j;\r\n                }\r\n            }\r\n            // Swap min element with 1st element in unsorted array\r\n            array[i] = array.splice(min_id, 1, array[i])[0];\r\n            array[i].color = FINISH_COLOR;\r\n            this.addAnimation(array);\r\n        }\r\n    }\r\n\r\n    quickSortHelper() {\r\n        var arr = this.state.array;\r\n        this.quickSort(arr, 0, ARRAY_SIZE - 1, 0);\r\n    }\r\n\r\n    quickSortPartition(arr, low, high) {\r\n        var pivot = arr[high];\r\n        var i = low - 1;\r\n        for (var j = low; j < high; j++) {\r\n            arr[j].color = COMP_COLOR;\r\n            if (arr[j].value < pivot.value) {\r\n                i++;\r\n\r\n                if (i > 0 && i > low) arr[i - 1].color = START_COLOR;\r\n                arr[i].color = COMP_COLOR;\r\n\r\n                [arr[i], arr[j]] = [arr[j], arr[i]];\r\n            }\r\n            this.addAnimation(arr);\r\n            arr[j].color = PIVOT_COLOR;\r\n        }\r\n        [arr[i + 1], arr[high]] = [arr[high], arr[i + 1]];\r\n\r\n        // Recolor all bars that were partitioned around the pivot\r\n        if (i > 0 && i > low) arr[i].color = START_COLOR;\r\n        for (let j = i + 2; j <= high; j++) {\r\n            arr[j].color = START_COLOR;\r\n        }\r\n        // arr[i+1] is now in sorted position\r\n        arr[i + 1].color = FINISH_COLOR;\r\n        this.addAnimation(arr);\r\n\r\n        return i + 1;\r\n    }\r\n\r\n    quickSort(arr, low, high) {\r\n        if (low <= high) {\r\n            var pi = this.quickSortPartition(arr, low, high);\r\n            this.quickSort(arr, low, pi - 1);\r\n            this.quickSort(arr, pi + 1, high);\r\n        }\r\n    }\r\n\r\n    bubbleSort() {\r\n        let array = this.state.array;\r\n\r\n        for (let i = 0; i < ARRAY_SIZE - 1; i++) {\r\n            for (let j = 0; j < ARRAY_SIZE - i - 1; j++) {\r\n                // Swap elements j and j+1 if needed\r\n                if (array[j].value > array[j + 1].value) {\r\n                    array[j] = array.splice(j + 1, 1, array[j])[0];\r\n                }\r\n\r\n                // Change bars to comp color\r\n                array[j].color = COMP_COLOR;\r\n                if (j + 1 === ARRAY_SIZE - i - 1) {\r\n                    array[j + 1].color = FINISH_COLOR;\r\n                } else {\r\n                    array[j + 1].color = COMP_COLOR;\r\n                }\r\n\r\n                this.addAnimation(array);\r\n\r\n                // Change bars back to start color after done comparing\r\n                array[j].color = START_COLOR;\r\n                if (j + 1 < ARRAY_SIZE - i - 1) {\r\n                    array[j + 1].color = START_COLOR;\r\n                }\r\n\r\n                // Edge case for after every element has been sorted\r\n                if (i === ARRAY_SIZE - 2) {\r\n                    array[0].color = FINISH_COLOR;\r\n                    this.addAnimation(array);\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    render() {\r\n        const dropdownOptions = [\r\n            { value: \"selection\", label: \"Selection Sort\" },\r\n            { value: \"quick\", label: \"Quick Sort\" },\r\n            { value: \"bubble\", label: \"Bubble Sort\" }\r\n        ];\r\n        return (\r\n            <div className=\"visualizer\">\r\n                <nav>\r\n                    <ul>\r\n                        <li className=\"slider\">\r\n                            {\" \"}\r\n                            Array Size\r\n                            <Slider min={5} max={200} value={ARRAY_SIZE} orientation=\"horizontal\" onChange={this.handleArraySliderChange} tooltip={false} />\r\n                        </li>\r\n                        <li className=\"slider\">\r\n                            Animation Speed\r\n                            <Slider min={0.01} max={0.2} step={0.001} format={value => Math.floor(value * 1000)} value={this.state.animationSpeed} orientation=\"horizontal\" onChange={this.handleAnimationSliderChange} tooltip={false} />\r\n                        </li>\r\n                        <li className=\"dropdown\">\r\n                            <Dropdown value={this.state.algorithm} ref=\"algorithm\" options={dropdownOptions} placeholder=\"Select a sorting algorithm\" onChange={this.handleDropdownChange} />\r\n                        </li>\r\n                        <li>\r\n                            <button\r\n                                onClick={() => {\r\n                                    if (this.isSorting || this.isSorted) {\r\n                                        return;\r\n                                    }\r\n                                    this.isSorting = true;\r\n                                    switch (this.state.algorithm) {\r\n                                        case \"selection\":\r\n                                            this.selectionSort();\r\n                                            break;\r\n                                        case \"quick\":\r\n                                            this.quickSortHelper();\r\n                                            break;\r\n                                        case \"bubble\":\r\n                                            this.bubbleSort();\r\n                                            break;\r\n                                        default:\r\n                                    }\r\n                                    this.initEndSequence();\r\n                                }}\r\n                            >\r\n                                Sort\r\n                            </button>\r\n                        </li>\r\n                        <li>\r\n                            <button onClick={() => this.generateArray()}>Generate New Array</button>\r\n                        </li>\r\n                        <li>\r\n                            <a href=\"https://github.com/camgraff/sorting-algorithm-visualizer\" id=\"gh-link\">\r\n                                View Code\r\n                            </a>\r\n                        </li>\r\n                        <li>\r\n                            <a href=\"https://camgraff.github.io\" id=\"back-button\">\r\n                                camgraff.github.io\r\n                            </a>\r\n                        </li>\r\n                    </ul>\r\n                </nav>\r\n\r\n                <div className=\"array-container\">\r\n                    {this.state.array.map((el, id) => (\r\n                        <div\r\n                            className=\"array-bar\"\r\n                            key={id}\r\n                            style={{\r\n                                backgroundColor: el.color,\r\n                                height: `${el.value / (MAX_ARRAY_VAL / HEIGHT_PROP)}vh`,\r\n                                width: `${WIDTH_PROP / ARRAY_SIZE}vw`\r\n                            }}\r\n                        ></div>\r\n                    ))}\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Visualizer;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport Visualizer from './Visualizer';\nimport * as serviceWorker from './serviceWorker';\n\n\n\nReactDOM.render(<Visualizer />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}