{"version":3,"sources":["Visualizer.jsx","serviceWorker.js","index.js"],"names":["ARRAY_SIZE","timerIds","animations","isSorted","Visualizer","props","handleArraySliderChange","value","generateArray","handleAnimationSliderChange","forEach","clearTimeout","setState","animationSpeed","handleDropdownChange","event","algorithm","state","array","this","bgColor","arrayBars","document","getElementsByClassName","i","style","backgroundColor","arr","push","Math","floor","random","prevMinId","setTimeout","min_id","j","height","splice","prevBar1","prevBar2","sorted","includes","bar1","bar2","isPiv","length","quickSort","doAnimations","low","high","pivot","counter","pi","quickSortPartition","className","min","max","orientation","onChange","tooltip","step","format","ref","options","label","placeholder","onClick","selectionSort","quickSortHelper","bubbleSort","href","id","map","val","key","width","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.c4d51163.chunk.js","sourcesContent":["import React from \"react\";\r\nimport \"./Visualizer.scss\";\r\nimport Slider from \"react-rangeslider\";\r\nimport \"react-rangeslider/lib/index.css\";\r\nimport Dropdown from \"react-dropdown\";\r\nimport \"react-dropdown/style.css\";\r\n\r\nvar ARRAY_SIZE = 100;\r\nconst MAX_ARRAY_VAL = 1000;\r\n\r\n//percent of screen that array container div uses\r\nconst HEIGHT_PROP = 70;\r\nconst WIDTH_PROP = 60;\r\n\r\n//array of times used to cancel sorting animations\r\nvar timerIds = [];\r\n\r\n//bar colors\r\nconst START_COLOR = \"red\";\r\nconst COMP_COLOR = \"yellow\";\r\nconst FINISH_COLOR = \"blue\";\r\n\r\nvar animations = [];\r\n\r\nvar isSorted = false;\r\n\r\nclass Visualizer extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            array: [],\r\n            animationSpeed: 0.1,\r\n            algorithm: \"\"\r\n        };\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.generateArray();\r\n    }\r\n\r\n    componentDidUpdate() {\r\n        let bgColor;\r\n        if (isSorted) bgColor = FINISH_COLOR;\r\n        else bgColor = START_COLOR;\r\n        //set bar colors back to red if unsorted\r\n        var arrayBars = document.getElementsByClassName(\"array-bar\");\r\n        for (var i = 0; i < ARRAY_SIZE; i++) {\r\n            arrayBars[i].style.backgroundColor = bgColor;\r\n        }\r\n    }\r\n\r\n    generateArray() {\r\n        //reset animations\r\n        animations = [];\r\n\r\n        //stop the animation if function is called while sorting\r\n        timerIds.forEach(function(value) {\r\n            clearTimeout(value);\r\n        });\r\n\r\n        //populate array values\r\n        const arr = [];\r\n        for (var i = 0; i < ARRAY_SIZE; i++) {\r\n            arr.push(Math.floor(Math.random() * MAX_ARRAY_VAL));\r\n        }\r\n        isSorted = false;\r\n        this.setState({ array: arr });\r\n    }\r\n\r\n    selectionSort() {\r\n        if (isSorted) return;\r\n        //stop the animation if function is called while sorting\r\n        timerIds.forEach(function(value) {\r\n            clearTimeout(value);\r\n        });\r\n\r\n        var array = this.state.array;\r\n        var arrayBars = document.getElementsByClassName(\"array-bar\");\r\n        var prevMinId = 0;\r\n        for (let i = 0; i < ARRAY_SIZE; i++) {\r\n            timerIds.push(\r\n                setTimeout(() => {\r\n                    var min_id = i;\r\n                    for (let j = i + 1; j < ARRAY_SIZE; j++) {\r\n                        if (array[j] < array[min_id]) min_id = j;\r\n                    }\r\n\r\n                    //recolor previous yellow bar back to red since no longer being swapped\r\n                    if (prevMinId > i) arrayBars[prevMinId].style.backgroundColor = START_COLOR;\r\n                    prevMinId = min_id;\r\n                    //color bar that is being swapped yellow\r\n                    arrayBars[min_id].style.height = `${array[i] / (MAX_ARRAY_VAL / HEIGHT_PROP)}vh`;\r\n                    arrayBars[min_id].style.backgroundColor = COMP_COLOR;\r\n                    //color minimum value bar blue since it will be in sorted order\r\n                    arrayBars[i].style.height = `${array[min_id] / (MAX_ARRAY_VAL / HEIGHT_PROP)}vh`;\r\n                    arrayBars[i].style.backgroundColor = FINISH_COLOR;\r\n                    //swap array values\r\n                    array[i] = array.splice(min_id, 1, array[i])[0];\r\n                }, i / this.state.animationSpeed)\r\n            );\r\n        }\r\n        isSorted = true;\r\n    }\r\n\r\n    doAnimations() {\r\n        var arrayBars = document.getElementsByClassName(\"array-bar\");\r\n        var prevBar1;\r\n        var prevBar2;\r\n        var sorted = [];\r\n        //animations are of the form [[index1, value1], [index2, value2], isPivot]\r\n        for (let i = 0; i < animations.length; i++) {\r\n            timerIds.push(\r\n                setTimeout(() => {\r\n                    if (i > 0) {\r\n                        if (!sorted.includes(prevBar1[0])) arrayBars[prevBar1[0]].style.backgroundColor = START_COLOR;\r\n                        if (!sorted.includes(prevBar2[0])) arrayBars[prevBar2[0]].style.backgroundColor = START_COLOR;\r\n                    }\r\n                    const bar1 = animations[i][0];\r\n                    const bar2 = animations[i][1];\r\n                    const isPiv = animations[i][2];\r\n                    arrayBars[bar1[0]].style.height = `${bar2[1] / (MAX_ARRAY_VAL / HEIGHT_PROP)}vh`;\r\n                    arrayBars[bar1[0]].style.backgroundColor = COMP_COLOR;\r\n                    arrayBars[bar2[0]].style.height = `${bar1[1] / (MAX_ARRAY_VAL / HEIGHT_PROP)}vh`;\r\n                    arrayBars[bar2[0]].style.backgroundColor = COMP_COLOR;\r\n                    if (isPiv === 1) {\r\n                        sorted.push(bar1[0]);\r\n                        arrayBars[bar1[0]].style.backgroundColor = FINISH_COLOR;\r\n                    }\r\n                    prevBar1 = bar1;\r\n                    prevBar2 = bar2;\r\n                }, i / this.state.animationSpeed)\r\n            );\r\n        }\r\n    }\r\n\r\n    quickSortHelper() {\r\n        if (isSorted) return;\r\n        //stop the animation if function is called while sorting\r\n        timerIds.forEach(function(value) {\r\n            clearTimeout(value);\r\n        });\r\n        var arr = this.state.array;\r\n        this.quickSort(arr, 0, ARRAY_SIZE - 1, 0);\r\n        this.doAnimations();\r\n        isSorted = true;\r\n    }\r\n\r\n    quickSortPartition(arr, low, high) {\r\n        var pivot = arr[high];\r\n        var i = low - 1;\r\n        for (var j = low; j < high; j++) {\r\n            if (arr[j] < pivot) {\r\n                i++;\r\n                animations.push([[i, arr[i]], [j, arr[j]], 0]);\r\n                arr[i] = arr.splice(j, 1, arr[i])[0];\r\n            }\r\n        }\r\n        animations.push([[i + 1, arr[i + 1]], [high, arr[high]], 1]);\r\n        arr[i + 1] = arr.splice(high, 1, arr[i + 1])[0];\r\n        return i + 1;\r\n    }\r\n\r\n    quickSort(arr, low, high, counter) {\r\n        if (low <= high) {\r\n            var pi = this.quickSortPartition(arr, low, high, counter);\r\n            this.quickSort(arr, low, pi - 1, counter + 1);\r\n            this.quickSort(arr, pi + 1, high, counter + 1);\r\n        }\r\n    }\r\n\r\n    bubbleSort() {\r\n        var array = this.state.array;\r\n        for (let i = 0; i < ARRAY_SIZE - 1; i++) {\r\n            for (let j = 0; j < ARRAY_SIZE - i - 1; j++) {\r\n                if (j + 1 === ARRAY_SIZE - i - 1) animations.push([[j + 1, array[j + 1]], [j, array[j]], 1]);\r\n                else animations.push([[j + 1, array[j + 1]], [j, array[j]], 0]);\r\n\r\n                if (array[j] > array[j + 1]) array[j] = array.splice(j + 1, 1, array[j])[0];\r\n            }\r\n        }\r\n\r\n        //need this line since last element must already be in sorted position,\r\n        //but the above loop will not add it to animations\r\n        animations.push([[0, array[0]], [0, array[0]], 1]);\r\n\r\n        isSorted = true;\r\n        this.doAnimations();\r\n    }\r\n\r\n    handleArraySliderChange = value => {\r\n        ARRAY_SIZE = value;\r\n        this.generateArray();\r\n    };\r\n\r\n    handleAnimationSliderChange = value => {\r\n        //stop the animation if function is called while sorting\r\n        timerIds.forEach(function(value) {\r\n            clearTimeout(value);\r\n        });\r\n        this.setState({ animationSpeed: value });\r\n\r\n        //if called in the middle of an animation, we create a new array\r\n        //might want to change this in future, but probably need to make a new component to avoid rerender\r\n        if (isSorted) this.generateArray();\r\n    };\r\n\r\n    handleDropdownChange = event => {\r\n        this.setState({ algorithm: event.value });\r\n        if (isSorted) this.generateArray();\r\n    };\r\n\r\n    render() {\r\n        const dropdownOptions = [\r\n            { value: \"selection\", label: \"Selection Sort\" },\r\n            { value: \"quick\", label: \"Quick Sort\" },\r\n            { value: \"bubble\", label: \"Bubble Sort\" }\r\n        ];\r\n        return (\r\n            <div className=\"visualizer\">\r\n                <nav>\r\n                    <ul>\r\n                        <li className=\"slider\">\r\n                            {\" \"}\r\n                            Array Size\r\n                            <Slider min={5} max={200} value={ARRAY_SIZE} orientation=\"horizontal\" onChange={this.handleArraySliderChange} tooltip={false} />\r\n                        </li>\r\n                        <li className=\"slider\">\r\n                            Animation Speed\r\n                            <Slider min={0.01} max={0.2} step={0.001} format={value => Math.floor(value * 1000)} value={this.state.animationSpeed} orientation=\"horizontal\" onChange={this.handleAnimationSliderChange} tooltip={false} />\r\n                        </li>\r\n                        <li className=\"dropdown\">\r\n                            <Dropdown value={this.state.algorithm} ref=\"algorithm\" options={dropdownOptions} placeholder=\"Select a sorting algorithm\" onChange={this.handleDropdownChange} />\r\n                        </li>\r\n                        <li>\r\n                            <button\r\n                                onClick={() => {\r\n                                    switch (this.state.algorithm) {\r\n                                        case \"selection\":\r\n                                            this.selectionSort();\r\n                                            break;\r\n                                        case \"quick\":\r\n                                            this.quickSortHelper();\r\n                                            break;\r\n                                        case \"bubble\":\r\n                                            this.bubbleSort();\r\n                                            break;\r\n                                        default:\r\n                                    }\r\n                                }}\r\n                            >\r\n                                Sort\r\n                            </button>\r\n                        </li>\r\n                        <li>\r\n                            <button onClick={() => this.generateArray()}>Generate New Array</button>\r\n                        </li>\r\n                        <li>\r\n                            <a href=\"https://github.com/camgraff/sorting-algorithm-visualizer\" id=\"gh-link\">\r\n                                View Code\r\n                            </a>\r\n                        </li>\r\n                        <li>\r\n                            <a href=\"https://camgraff.github.io\" id=\"back-button\">\r\n                                camgraff.github.io\r\n                            </a>\r\n                        </li>\r\n                    </ul>\r\n                </nav>\r\n\r\n                <div className=\"array-container\">\r\n                    {this.state.array.map((val, id) => (\r\n                        <div\r\n                            className=\"array-bar\"\r\n                            key={id}\r\n                            style={{\r\n                                backgroundColor: START_COLOR,\r\n                                height: `${val / (MAX_ARRAY_VAL / HEIGHT_PROP)}vh`,\r\n                                width: `${WIDTH_PROP / ARRAY_SIZE}vw`\r\n                            }}\r\n                        ></div>\r\n                    ))}\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Visualizer;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport Visualizer from './Visualizer';\nimport * as serviceWorker from './serviceWorker';\n\n\n\nReactDOM.render(<Visualizer />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}